{"version":3,"file":"server.3469d923b7ff6501366f.hot-update.js","sources":["webpack:///./src/server/index.js"],"sourcesContent":["import App from '../common/containers/App';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport configureStore from '../common/store/configureStore';\nimport express from 'express';\nimport { fetchCounter } from '../common/api/counter';\nimport qs from 'qs';\nimport { renderToString } from 'react-dom/server';\nimport { StaticRouter } from 'react-router-dom';\nimport serialize from 'serialize-javascript';\n\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST);\n\nconst server = express();\n\nserver\n  .disable('x-powered-by')\n  .use(express.static(process.env.RAZZLE_PUBLIC_DIR))\n  .get('/*', (req, res) => {\n    fetchCounter(apiResult => {\n      // Read the counter from the request, if provided\n      const context = {};\n      const params = qs.parse(req.query);\n      const counter = parseInt(params.counter, 10) || apiResult || 0;\n\n      // Compile an initial state\n      const preloadedState = { counter };\n\n      // Create a new Redux store instance\n      const store = configureStore(preloadedState);\n\n      // Render the component to a string\n      const markup = renderToString(\n        <Provider store={store}>\n           <StaticRouter\n\n               location={req.url} context={context}>\n            <App />\n          </StaticRouter>\n        </Provider>\n      );\n\n      // Grab the initial state from our Redux store\n      const finalState = store.getState();\n\n      const helmet = Helmet.renderStatic();\n\n      res.send(`<!doctype html>\n    <html lang=\"${assets.client.lang}\" ${helmet.htmlAttributes.toString()}>\n    <head>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta charSet='utf-8' />\n        ${helmet.title.toString()}\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        ${helmet.meta.toString()} \n        ${helmet.link.toString()} \n        ${assets.client.css\n          ? `<link rel=\"stylesheet\" href=\"${assets.client.css}\">`\n          : ''}\n        \n    </head>\n    <body ${helmet.bodyAttributes.toString()}>\n        <div id=\"root\">${markup}</div>\n        <script>\n          window.__PRELOADED_STATE__ = ${serialize(finalState)}\n        </script>\n   \n        ${process.env.NODE_ENV === 'production'\n        ? `<script src=\"${assets.client.js}\" defer></script>`\n        : `<script src=\"${assets.client.js}\" defer crossorigin></script>`}\n    </body>\n</html>`);\n    });\n  });\n\nexport default server;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AAEA;AAEA;AAyBA;AACA;AAEA;;;;A","sourceRoot":""}