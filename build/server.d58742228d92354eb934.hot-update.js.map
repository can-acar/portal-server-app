{"version":3,"file":"server.d58742228d92354eb934.hot-update.js","sources":["webpack:///./src/server/index.js"],"sourcesContent":["import React from 'react';\r\nimport express from 'express';\r\nimport {Helmet} from 'react-helmet';\r\n\r\n\r\nimport {renderToString} from 'react-dom/server';\r\nimport {HelmetProvider} from \"react-helmet-async\";\r\nimport {Provider, ReactReduxContext} from \"react-redux\";\r\nimport {matchPath, StaticRouter} from 'react-router-dom';\r\nimport serialize from 'serialize-javascript';\r\nimport path from 'path';\r\nimport {html, oneLineTrim} from 'common-tags';\r\n\r\nimport {ChunkExtractor, ChunkExtractorManager} from \"@loadable/server\";\r\nimport configureAppStore from \"../app/commons/configureAppStore\";\r\nimport routes from \"../app/commons/routes\";\r\nimport {fetchRoute} from \"../app/commons/router\";\r\nimport App from \"../app/index\";\r\n\r\n\r\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST);\r\nlet statsFile\r\nlet extractor\r\n\r\nif(process.env.NODE_ENV === 'production'){\r\n    console.log('reading statsfile for PROD');\r\n    statsFile = path.resolve('./build/loadable-stats.json')\r\n    extractor = new ChunkExtractor({statsFile, entrypoints: ['client']})\r\n}\r\n\r\nconst helmetContext = {\r\n    htmlAttributes: {lang: 'tr'}\r\n};\r\n\r\nconst server = express();\r\n\r\nconst Render = (markup, extractor, helmet, preloadState) => oneLineTrim(html`\r\n    <!doctype html>\r\n    <html ${helmet.htmlAttributes.toString()}>\r\n    <head>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\r\n        <meta charSet='utf-8'/>\r\n        <base href=\"/\">\r\n        ${helmet.title.toString()}\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n        ${helmet.meta.toString()}\r\n        ${helmet.link.toString()}\r\n        ${extractor.getLinkTags()}\r\n        ${extractor.getStyleTags()}\r\n\r\n\r\n    </head>\r\n    <body ${helmet.bodyAttributes.toString()}>\r\n\r\n    <div id=\"appRoot\" class=\"flex-shrink-0\">${markup}</div>\r\n    <script type=\"text/javascript\">\r\n        window.__INITIAL_STATE__ = ${serialize(preloadState, {isJSON: true, unsafe: false})}\r\n    </script>\r\n\r\n    ${extractor.getScriptTags()}\r\n    </body>\r\n    </html>`);\r\n\r\nconst Document = (store, extractor, helmetContext, req) => {\r\n    const html = renderToString(\r\n        <Provider store={store} context={ReactReduxContext}>\r\n            <StaticRouter\r\n                location={req.path}\r\n                context={ReactReduxContext}>\r\n                <ChunkExtractorManager extractor={extractor}>\r\n                    <HelmetProvider context={helmetContext}>\r\n                        <App/>\r\n                    </HelmetProvider>\r\n                </ChunkExtractorManager>\r\n            </StaticRouter>\r\n        </Provider>\r\n    );\r\n    return html\r\n}\r\n\r\nserver\r\n    .disable('x-powered-by')\r\n    .use(express.static(process.env.RAZZLE_PUBLIC_DIR))\r\n    .get('/*', async(req, res) => {\r\n        await fetchRoute(req, async(router) => {\r\n\r\n            if(process.env.NODE_ENV === 'development'){\r\n\r\n                extractor = new ChunkExtractor({\r\n                    statsFile: path.resolve('build/loadable-stats.json'),\r\n                    entrypoints: ['client'],\r\n                });\r\n            }\r\n\r\n            const context = {router};\r\n\r\n            const store = configureAppStore(context);\r\n\r\n\r\n            store.runSagaTask()\r\n\r\n            const promises = routes\r\n                .filter(route => matchPath(req.url, route))\r\n                .map(route => route.component)\r\n                .filter(comp => comp.prefetch)\r\n                .map(comp => comp.prefetch({dispatch: store.dispatch, state: store.getState()}))\r\n\r\n\r\n            Promise.all(promises).then(() => {\r\n\r\n                const preloadedState = store.getState();\r\n\r\n                const helmet = Helmet.renderStatic();\r\n                // Grab the initial state from our Redux store\r\n                const html = Document(store, extractor, helmet, req);\r\n\r\n                const response = Render(html, extractor, helmet, preloadedState);\r\n\r\n                if(context.url){\r\n                    res.status(301).redirect(context.url);\r\n\r\n                }else{\r\n\r\n                    res.status(200).send(response);\r\n                }\r\n            });\r\n        });\r\n\r\n    });\r\n\r\nexport default server;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA,aAIA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AAAA;AAoBA;AAAA;AAAA;AApBA;AACA;AA0BA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AA1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAkDA;;;;A","sourceRoot":""}